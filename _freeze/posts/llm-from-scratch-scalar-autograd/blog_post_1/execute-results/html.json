{
  "hash": "22336cc273a1819da12e15ee772c9106",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Building an LLM from scratch\ndescription: Automatic Differentiation\nauthor: Ben Clarkson\ndate: 02/10/2023\ndraft: false\n---\n\n::: {#bc2eb8de .cell vscode='{\"languageId\":\"python\"}' execution_count=1}\n``` {.python .cell-code code-fold=\"true\" code-summary=\"Setup\"}\nfrom typing import Any, Optional\n\nimport networkx as nx\n```\n:::\n\n\n## LLM from scratch: Automatic Differentiation\nI'm building a modern language model with all the bells and whistles completely from scratch: from vanilla python to functional coding assistant.  Borrowing (shamelessly stealing) from computer games, I've built a tech tree of everything that I think I'll need to implement to get a fully functional language model.  If you think anything is missing, please let me [know](mailto:bclarkson-code@proton.me):  \n\n![The LLM from scratch tech tree](images/tech_tree_post_1.png){width=\"700\"}\n\nBefore we can move onto building modern features like Rotary Positional Encodings, we first need to figure out how to differentiate with a computer.  The backpropagation algorithm that underpins the entire field of Deep Learning requires the ability to differentiate the outputs of neural networks with respect to (wrt) their inputs.  In this post, we'll go from nothing to a (admittedly very limited) automatic differentiation library that can differentiate arbitrary functions of scalar values.\n\nThis one algorithm will form the core of out deep learning library that, eventually, will include everything we need to train a language model.  \n\n## Creating a tensor \nWe can't do any differentiation if we don't have any numbers to differentiate.  We'll want to add some extra functionality that is in standard `float` types so we'll need to create out own.  let's call it a `Tensor`.\n\n::: {#87c6cfca .cell vscode='{\"languageId\":\"python\"}' execution_count=2}\n``` {.python .cell-code}\nclass Tensor:\n    \"\"\"\n    Just a number (for now)\n    \"\"\"\n\n    value: float\n\n    def __init__(self, value: float):\n        self.value = value\n\n    def __repr__(self) -> str:\n        \"\"\"\n        Create a printable string representation of this\n        object\n\n        This function gets called when you pass a Tensor to print\n\n        Without this function:\n        >>> print(Tensor(5))\n        <__main__.Tensor at 0x104fd1950>\n\n        With this function:\n        >>> print(Tensor(5))\n        Tensor(5)\n        \"\"\"\n        return f\"Tensor({self.value})\"\n\n\n# try it out\nTensor(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nTensor(5)\n```\n:::\n:::\n\n\nNext we'll need some simple operations we want to perform: addition, subtraction and multiplication.\n\n::: {#88138e6d .cell vscode='{\"languageId\":\"python\"}' execution_count=3}\n``` {.python .cell-code}\ndef _add(a: Tensor, b: Tensor):\n    \"\"\"\n    Add two tensors\n    \"\"\"\n    return Tensor(a.value + b.value)\n\n\ndef _sub(a: Tensor, b: Tensor):\n    \"\"\"\n    Subtract tensor b from tensor a\n    \"\"\"\n    return Tensor(a.value - b.value)\n\n\ndef _mul(a: Tensor, b: Tensor):\n    \"\"\"\n    Multiply two tensors\n    \"\"\"\n    return Tensor(a.value * b.value)\n```\n:::\n\n\nWe can use use our operations as follows:\n\n::: {#bfac3b6a .cell vscode='{\"languageId\":\"python\"}' execution_count=4}\n``` {.python .cell-code}\ndef test(got: Any, want: Any):\n    \"\"\"\n    Check that two objects are equal to each other\n    \"\"\"\n    indicator = \"✅\" if want == got else \"❌\"\n    print(f\"{indicator} - Want: {want}, Got: {got}\")\n\n\na = Tensor(3)\nb = Tensor(4)\n\n\ntest(_add(a, b).value, 7)\ntest(_sub(a, b).value, -1)\ntest(_mul(a, b).value, 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ - Want: 7, Got: 7\n✅ - Want: -1, Got: -1\n✅ - Want: 12, Got: 12\n```\n:::\n:::\n\n\n## Scalar derivatives\nDiving straight into differentiating matrices sounds too hard so let's start with something simpler: differentiating scalars.  The simplest scalar derivative I can think of is the derivative of a tensor with respect to (wrt) itself:\n$$\\frac{dx}{dx} = 1$$\n\nA more interesting case is the derivative of two tensors added together (note we are using partial derivatives because our function has multiple inputs):\n$$f(x, y) = x + y$$\n$$\\frac{\\partial f}{\\partial x} = 1$$\n$$\\frac{\\partial f}{\\partial y} = 1$$\n\nWe can do a similar thing for multiplication and subtraction\n\n|$f(x, y)$|$\\frac{\\partial f}{\\partial x}$|$\\frac{\\partial f}{\\partial y}$|\n|-|-|-|\n|$x + y$|$1$|$1$|\n|$x - y$|$1$|$-1$|\n|$x \\times y$|$y$|$x$|\n\nNow that we've worked out these derivatives mathematically, the next step is to convert them into code.  In the table above, when we make a tensor by combining two tensors with an operation, the derivative only ever depends on the inputs and the operation.  There is no \"hidden state\".\n\nThis means that the only information we need to store is the inputs to an operation and a function to calculate the derivative wrt each inputs.  With this, we should be able to differentiate any binary function wrt its inputs.  A good place to store this information is in the tensor that is produced by the operation.\n\nWe'll add some new attributes to our `Tensor`: `args` and `local_derivatives`.  If the tensor is the output of an operation, then `args` will store the arguments to the operation and `local_derivatives` will store the derivatives wrt each input.  We're calling it `local_derivatives` to avoid confusion when we start nesting functions.\n\nOnce we've calculated the derivative (from our `args` and `local_derivatives`) we'll need to store it.  It turns out that the neatest place to put this is in tensor that the output is being differentiated wrt.  We'll call this `derivative`\n\n::: {#1c8bde61 .cell vscode='{\"languageId\":\"python\"}' execution_count=5}\n``` {.python .cell-code}\nclass Tensor:\n    \"\"\"\n    A number that can be differentiated\n    \"\"\"\n\n    # If the tensor was made by an operation, the operation arguments\n    # are stored in args\n    args: tuple[\"Tensor\"] = ()\n    # If the tensor was made by an operation, the derivatives wrt\n    # operation inputs are stored in derivatives\n    local_derivatives: tuple[\"Tensor\"] = ()\n    # The derivative we have calculated\n    derivative: Optional[\"Tensor\"] = None\n\n    def __init__(self, value: float):\n        self.value = value\n\n    def __repr__(self) -> str:\n        \"\"\"\n        Create a printable string representation of this\n        object\n\n        This function gets called when you pass a Tensor to print\n\n        Without this function:\n        >>> print(Tensor(5))\n        <__main__.Tensor at 0x104fd1950>\n\n        With this function:\n        >>> print(Tensor(5))\n        Tensor(5)\n        \"\"\"\n        return f\"Tensor({self.value})\"\n```\n:::\n\n\nFor example, if we have \n\n::: {#57e491c3 .cell vscode='{\"languageId\":\"python\"}' execution_count=6}\n``` {.python .cell-code}\na = Tensor(3)\nb = Tensor(4)\n\noutput = _mul(a, b)\n```\n:::\n\n\nThen `output.args` and `output.local_derivatives` should be equal to should be set to:\n\n```python\noutput.args == (Tensor(3), Tensor(4))\noutput.derivatives == (\n    b,  # derivative of output wrt a is b\n    a,  # derivative of output wrt b is a\n)\n```\n\nOnce we have actually computed the derivatives, then the derivative of `output` wrt `a` will be stored in `a.derivative` and should be equal to `b` (which is 4 in this case).  \n\nWe know that we've done everything right once these tests pass:\n\n::: {#a1e8c6ab .cell vscode='{\"languageId\":\"python\"}' execution_count=7}\n``` {.python .cell-code}\na = Tensor(3)\nb = Tensor(4)\n\noutput = _mul(a, b)\n\n# TODO: differentiate here\n\ntest(got=output.args, want=(a, b))\ntest(got=output.local_derivatives, want=(b, a))\ntest(a.derivative, b)\ntest(b.derivative, a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n❌ - Want: (Tensor(3), Tensor(4)), Got: ()\n❌ - Want: (Tensor(4), Tensor(3)), Got: ()\n❌ - Want: Tensor(4), Got: None\n❌ - Want: Tensor(3), Got: None\n```\n:::\n:::\n\n\nFirst, let's add a function to our `Tensor` that will actually calculate the derivatives for each of the function arguments.  Pytorch calls this function `backward` so we'll do the same.\n\n::: {#432ce674 .cell vscode='{\"languageId\":\"python\"}' execution_count=8}\n``` {.python .cell-code}\nclass Tensor:\n    \"\"\"\n    A number that can be differentiated\n    \"\"\"\n\n    # If the tensor was made by an operation, the operation arguments\n    # are stored in args\n    args: tuple[\"Tensor\"] = ()\n    # If the tensor was made by an operation, the derivatives wrt\n    # operation inputs are stored in\n    local_derivatives: tuple[\"Tensor\"] = ()\n    # The derivative we have calculated\n    derivative: Optional[\"Tensor\"] = None\n\n    def __init__(self, value: float):\n        self.value = value\n\n    def backward(self):\n        if self.args is None or self.local_derivatives is None:\n            raise ValueError(\n                \"Cannot differentiate a Tensor that is not a function of other Tensors\"\n            )\n\n        for arg, derivative in zip(self.args, self.local_derivatives):\n            arg.derivative = derivative\n\n    def __repr__(self) -> str:\n        \"\"\"\n        Create a printable string representation of this\n        object\n\n        This function gets called when you pass a Tensor to print\n\n        Without this function:\n        >>> print(Tensor(5))\n        <__main__.Tensor at 0x104fd1950>\n\n        With this function:\n        >>> print(Tensor(5))\n        Tensor(5)\n        \"\"\"\n        return f\"Tensor({self.value})\"\n```\n:::\n\n\nThis only works if we also store the arguments and derivatives in the output tensors of operations\n\n::: {#a2a009fd .cell vscode='{\"languageId\":\"python\"}' execution_count=9}\n``` {.python .cell-code}\ndef _add(a: Tensor, b: Tensor):\n    \"\"\"\n    Add two tensors\n    \"\"\"\n    result = Tensor(a.value + b.value)\n    result.local_derivatives = (Tensor(1), Tensor(1))\n    result.args = (a, b)\n    return result\n\n\ndef _sub(a: Tensor, b: Tensor):\n    \"\"\"\n    Subtract tensor b from a\n    \"\"\"\n    result = Tensor(a.value - b.value)\n    result.local_derivatives = (Tensor(1), Tensor(-1))\n    result.args = (a, b)\n    return result\n\n\ndef _mul(a: Tensor, b: Tensor):\n    \"\"\"\n    Multiply two tensors\n    \"\"\"\n    result = Tensor(a.value * b.value)\n    result.local_derivatives = (b, a)\n    result.args = (a, b)\n    return result\n```\n:::\n\n\nlet's re-run our tests and see if it works\n\n::: {#85cb385c .cell vscode='{\"languageId\":\"python\"}' execution_count=10}\n``` {.python .cell-code}\na = Tensor(3)\nb = Tensor(4)\n\noutput = _mul(a, b)\n\noutput.backward()\n\ntest(got=output.args, want=(a, b))\ntest(got=output.local_derivatives, want=(b, a))\ntest(a.derivative, b)\ntest(b.derivative, a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ - Want: (Tensor(3), Tensor(4)), Got: (Tensor(3), Tensor(4))\n✅ - Want: (Tensor(4), Tensor(3)), Got: (Tensor(4), Tensor(3))\n✅ - Want: Tensor(4), Got: Tensor(4)\n✅ - Want: Tensor(3), Got: Tensor(3)\n```\n:::\n:::\n\n\nSo far so good, let's try nesting operations.\n\n::: {#37310aaf .cell vscode='{\"languageId\":\"python\"}' execution_count=11}\n``` {.python .cell-code}\na = Tensor(3)\nb = Tensor(4)\n\noutput_1 = _mul(a, b)\n# z = a + (a * b)\noutput_2 = _add(a, output_1)\n\noutput_2.backward()\n\n# should get\n# dz/db = 0 + a = a\ntest(b.derivative, a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n❌ - Want: Tensor(3), Got: None\n```\n:::\n:::\n\n\nSomething has gone wrong.  \n\nWe should have got `a` as the derivative for `b` but we got `0` instead.  Looking through the `.backward()` function, the issue is pretty clear:\nwe haven't thought about nested functions.  To get this example working, we'll need to figure out how to calculate derivatives through multiple functions instead of just one.\n\n## Chaining Functions Together\n\nTo calculate derivates of nested functions, we can use a rule from calculus: The Chain Rule.\n\nFor a variable $z$ generated by nested functions $f$ and $g$ such that\n$$z = f(g(x))$$\n\nThen the derivative of $z$ wrt $x$ is:\n$$\\frac{\\partial z}{\\partial x} = \\frac{\\partial f(u)}{\\partial u} \\frac{\\partial g(x)}{\\partial x}$$\n\nHere, $u$ is a dummy variable.   $\\frac{\\partial f(u)}{\\partial u}$ means the derivative of $f$ wrt its input.\n\nFor example, if \n\n$$f(x) = g(x)^2$$\nThen we can define $u=g(x)$ and rewrite $f$ in terms of u \n$$f(u) = u^2 \\implies \\frac{\\partial f(u)}{\\partial u} = 2u = 2 g(x)$$\n\n### Multiple Variables\nThe chain rule works as you might expect for functions of multiple variables.  When differentiating wrt a variable, we can treat the other variables as constant and differentiate as normal\n$$z = f(g(x), h(y))$$\n\n$$\\frac{\\partial z}{\\partial x} = \\frac{\\partial f(u)}{\\partial u} \\frac{\\partial g(x)}{\\partial x}$$\n$$\\frac{\\partial z}{\\partial y} = \\frac{\\partial f(u)}{\\partial u} \\frac{\\partial h(y)}{\\partial y}$$\n\nIf we have different functions that take the same input, we differentiate each of them individually and then add them together\n\n$$z = f(g(x), h(x))$$\n\nWe get\n$$\\frac{\\partial z}{\\partial x} = \\frac{\\partial f(u)}{\\partial u}\\frac{\\partial g(x)}{\\partial x} + \\frac{\\partial f(u)}{\\partial u}\\frac{\\partial h(x)}{\\partial x}$$\n\n### More than 2 functions\nIf we chain 3 functions together, we still just multiply the derivatives for each function together:\n\n$$\\frac{\\partial z}{\\partial x} = \\frac{\\partial f(u)}{\\partial u} \\frac{\\partial g(x)}{\\partial x} = \\frac{\\partial f(u)}{\\partial u} \\frac{\\partial g(u)}{\\partial u}\\frac{\\partial h(x)}{\\partial x}$$\n\nAnd this generalises to any amount of nesting\n\n$$z = f_1(f_2(....f_{n-1}(f_n(x))...)) \\implies \\frac{\\partial z}{\\partial x} = \\frac{\\partial f_1(u)}{\\partial u}\\frac{\\partial f_2(u)}{\\partial u}...\\frac{\\partial f_{n-1}(u)}{\\partial u}\\frac{\\partial f_{n}(x)}{\\partial x}$$\n\n### A picture is worth a thousand equations\nAs you probably noticed, the maths is starting to get quite dense.  When we start working with neural networks, we can easily get 100s or 1000s of functions deep so to get a handle on things, we'll need a different strategy.  Helpfully, there is one: turning it into a graph.\n\nWe can start with some rules:\n\n> Variables are represented with circles and operations are represented with boxes\n\n![](images/variable_and_box.png){width=50% fig-align=\"center\"}\n\n> Inputs to an operation are represented with arrows that point to the operation box.  Outputs point away.\n\nFor example, here is the diagram for $z = mx$\n\n![](images/z_eq_mx.png){width=50% fig-align=\"center\"}\n\nAnd that's it! All of the equations we'll be working with can be represented graphically using these simple rules.  To try it out, let's draw the diagram for a more complex formula:\n\n![](images/square_error.png){ width=60% fig-align=\"center\"}\n\nThis is an example of a structure called a graph (also called a network).  A lot of problem in computer science get much easier if you can represent them with a graph and this is no exception.\n\nThe real power of these diagrams is that they can also help us with our derivatives.  Take \n$$y = mx + p = \\texttt{add}(p, \\texttt{mul}(m ,x)).$$\n\nFrom before, we can find its derivatives by differentiating each operation wrt its inputs and multiplying the results together.  In this case, we get:\n$$\\frac{\\partial y}{\\partial p} = \\frac{\\partial \\texttt{add}(u_1, u_2)}{\\partial u_1} = 1$$\n$$\\frac{\\partial y}{\\partial m} = \\frac{\\partial \\texttt{add}(u_1, u_2)}{\\partial u_2}\\frac{\\partial \\texttt{mul}(u_1, u_2)}{\\partial u_2} = 1 \\times x = x$$\n$$\\frac{\\partial y}{\\partial x} = \\frac{\\partial \\texttt{add}(u_1, u_2)}{\\partial u_2}\\frac{\\partial \\texttt{mul}(u_1, u_2)}{\\partial u_1} = 1 \\times m = m$$\n\nWe can also graph it like this:\n\n![](images/y_eq_mx_plus_p_labelled.png){ width=50% fig-align=\"center\"}\n\nIf you imagine walking from $y$ to each of the inputs, you might notice a similarity between the edges you pass through and the equations above.  If you walk from $y$ to $x$, you'll pass through `a->c->d`.   Similarly, if you walk from $y$ to $m$, you'll pass through `a->d->e`.  Notice that both paths go through `c`, the edge coming out of `add` that corresponds to the input $u_2$.  Also, both equations  include the term $\\frac{\\partial \\texttt{add}(u_1, u_2)}{\\partial u_2}$.  \n\nIf I rename the edges as follows:\n\n![](images/y_eq_mx_plus_p_deriv.png){ width=50% fig-align=\"center\"}\n\nWe can see that going from $y$ to $x$, we pass through $1$, $\\frac{\\partial \\texttt{add}(u_1, u_2)}{\\partial u_2}$ and $\\frac{\\partial \\texttt{mul}(u_1, u_2)}{\\partial u_1}$.  If we multiply these together, we get exactly $\\frac{\\partial \\texttt{add}(u_1, u_2)}{\\partial u_2}\\frac{\\partial \\texttt{mul}(u_1, u_2)}{\\partial u_1} = \\frac{\\partial y}{\\partial x}$!\n\nIt turns out that this rule works in general:\n\n> If we have some operation $\\texttt{op}(u_1, u_2, ..., u_n)$, we should label the edge corresponding to input $u_i$ with $\\frac{\\partial \\texttt{op}(u_1, u_2, ..., u_n)}{\\partial u_i}$\n\nThen, if we want to find the derivative of the output node wrt any of the inputs,\n\n> The derivative of an output variable wrt one of the input variables can be found by traversing the graph from the output to the input and multiplying together the derivatives for every edge on the path\n\nTo cover every edge case, there are some extra details\n\n> If a graph contains multiple paths from the output to an input, then the derivative is the sum of the products for each path\n\nThis comes from the case we saw earlier where when we have different functions that have the same input we have to add their derivative chains together.\n\n> If an edge is not the input to any function, its derivative is 1\n\nThis covers the edge that leads from the final operation to the output.  You can think of the edge having the derivative $\\frac{\\partial y}{\\partial y}=1$\n\nAnd that's it! let's try it out with $z = (x + c)x$:\n\n![](images/z_eq_xx_plus_xc.png){width=50% fig-align=\"center\"}\n\nHere, instead of writing the formulae for each derivative, I have gone ahead and calculated their actual values.  Instead of just figuring out the formulae for a derivative, we want to calculate its value when we plug in our input parameters.  \n\nAll that remains is to multiply the local derivatives together along each path.  We'll call the product of derivatives along a single path a chain (after the chain rule)\n\nWe can get from $z$ to $x$ via the green path and the red path.  Following these paths, we get:\n$$\\text{red path} = 1 \\times (x + c) = x + c$$\nAlong the green path we get:\n$$\\text{green path} = 1 \\times x \\times 1 = x$$\n\nAdding these together, we get $(x+c) + x = 2x + c$\n\nIf we work out the derivative algebraically:\n\n$$\\frac{\\partial z}{\\partial x} = \\frac{\\partial}{\\partial x}((x+c)x) = \\frac{\\partial}{\\partial x}(x^2 + cx) = \\frac{\\partial x^2}{\\partial x} + c\\frac{\\partial x}{\\partial x} = 2x + c$$\n\nWe can see that it seems to work! (Calculating $\\frac{\\partial z}{\\partial c}$ is left as an exercise for the reader) \n\nTo summarise, we have invented the following algorithm for calculating of a variable wrt its inputs:\n\n1.  Turn the equation into a graph\n2.  Label each edge with the appropriate derivative\n3.  Find every path from the output to the input variable you care about\n4.  Follow each path and multiply the derivatives you pass through\n5.  Add together the results for each path\n\nWe have an algorithm in pictures and words, let's turn it into code.\n\n### The Algorithm™\n\nSuprisingly, we have actually already converted our functions into graphs.  If you recall, when we generate a tensor from an operation, we record the inputs to the operation in the output tensor (in `.args`).  We also stored the functions to calculate derivatives for each of the inputs in `.local_derivatives` which means that we know both the destination and derivative for every edge that points to a given node.  This means that we've already completed steps 1 and 2.\n\nThe next challenge is to find all paths from the tensor we want to differentiate to the input tensors that created it.  Because none of our operations are self referential (outputs are never fed back in as inputs), and all of our edges have a direction, our graph of operations is a  directed acyclic graph or DAG.  The property of the graph having no cycles means that we can find all paths to every parameter pretty easily with a Breadth First Search (or Depth First Search but BFS makes some optimisations easier as we'll see in part 2).\n\nTo try it out, let's recreate that giant graph we made earlier.  We can do this by first calculating $L$ from the inputs\n\n::: {#5f0c8b4c .cell vscode='{\"languageId\":\"python\"}' execution_count=12}\n``` {.python .cell-code}\ny = Tensor(1)\nm = Tensor(2)\nx = Tensor(3)\nc = Tensor(4)\n\n# L = (y - (mx + c))^2\nleft = _sub(y, _add(_mul(m, x), c))\nright = _sub(y, _add(_mul(m, x), c))\n\nL = _mul(left, right)\n\n# Attaching names to tensors will make our\n# diagram look nicer\ny.name = \"y\"\nm.name = \"m\"\nx.name = \"x\"\nc.name = \"c\"\nL.name = \"L\"\n```\n:::\n\n\nAnd then using Breadth First Search to do 3 things:\n\n - Find all nodes\n - Find all edges\n - Find all paths from $L$ to our parameters\n\nWe haven't implemented a simple way to check whether two tensors are identical so we'll need compare hashes.\n\n::: {#4b5ce064 .cell vscode='{\"languageId\":\"python\"}' execution_count=13}\n``` {.python .cell-code}\nedges = []\n\nstack = [(L, [L])]\n\nnodes = []\nedges = []\nwhile stack:\n    node, current_path = stack.pop()\n    # Record nodes we haven't seen before\n    if hash(node) not in [hash(n) for n in nodes]:\n        nodes.append(node)\n\n    # If we have reached a parameter (it has no arguments\n    # because it wasn't created by an operation) then\n    # record the path taken to get here\n    if not node.args:\n        if not hasattr(node, \"paths\"):\n            node.paths = []\n        node.paths.append(current_path)\n        continue\n\n    for arg in node.args:\n        stack.append((arg, current_path + [arg]))\n        # Record every new edge\n        edges.append((hash(node), hash(arg)))\n```\n:::\n\n\nNow we've got all of the edges and nodes, we have complete knowledge of our computational graph.  let's use networkx to plot it\n\n::: {#152ef641 .cell vscode='{\"languageId\":\"python\"}' execution_count=14}\n``` {.python .cell-code}\n# Assign a unique integer to each\n# unnamed node so we know which\n# node is which in the picture\nlabels = {}\nfor i, node in enumerate(nodes):\n    if hasattr(node, \"name\"):\n        labels[hash(node)] = node.name\n    else:\n        labels[hash(node)] = str(i)\n\ngraph = nx.DiGraph()\ngraph.add_edges_from(edges)\npos = nx.nx_agraph.pygraphviz_layout(graph, prog=\"dot\")\nnx.draw(graph, pos=pos, labels=labels)\n```\n\n::: {.cell-output .cell-output-display}\n![](blog_post_1_files/figure-html/cell-15-output-1.png){width=691 height=499}\n:::\n:::\n\n\nIf you squint a bit, you can see that this looks like to the graph we made earlier! let's take a look at the paths the algorithm found from $L$ to $x$.\n\n::: {#7490a85e .cell vscode='{\"languageId\":\"python\"}' execution_count=15}\n``` {.python .cell-code}\nfor path in x.paths:\n    steps = []\n    for step in path:\n        steps.append(labels[hash(step)])\n    print(\"->\".join(steps))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nL->1->2->4->x\nL->8->9->10->x\n```\n:::\n:::\n\n\nThe paths look correct! All we need to do now is to modify the algorithm a bit to keep track of the chain of derivatives along each path.\n\n::: {#6dcd0e84 .cell vscode='{\"languageId\":\"python\"}' execution_count=16}\n``` {.python .cell-code}\ny = Tensor(1)\nm = Tensor(2)\nx = Tensor(3)\nc = Tensor(4)\n\n# L = (y - (mx + c))^2\nleft = _sub(y, _add(_mul(m, x), c))\nright = _sub(y, _add(_mul(m, x), c))\n\nL = _mul(left, right)\n\ny.name = \"y\"\nm.name = \"m\"\nx.name = \"x\"\nc.name = \"c\"\nL.name = \"L\"\n```\n:::\n\n\n::: {#209dccd9 .cell vscode='{\"languageId\":\"python\"}' execution_count=17}\n``` {.python .cell-code}\nstack = [(L, [L], [])]\n\nnodes = []\nedges = []\nwhile stack:\n    node, current_path, current_chain = stack.pop()\n    # Record nodes we havent seen before\n    if hash(node) not in [hash(n) for n in nodes]:\n        nodes.append(node)\n\n    # If we have reached a parameter (it has no arguments\n    # because it wasn't created by an operation) then\n    # record the path taken to get here\n    if not node.args:\n        if not hasattr(node, \"paths\"):\n            node.paths = []\n        node.paths.append(current_path)\n\n        if not hasattr(node, \"chains\"):\n            node.chains = []\n        node.chains.append(current_chain)\n        continue\n\n    for arg, op in zip(node.args, node.local_derivatives):\n        next_node = arg\n        next_path = current_path + [arg]\n        next_chain = current_chain + [op]\n\n        stack.append((arg, next_path, next_chain))\n\n        # Record every new edge\n        edges.append((hash(node), hash(arg)))\n```\n:::\n\n\nlet's check if the derivatives were recorded correctly.\n\n::: {#14132867 .cell vscode='{\"languageId\":\"python\"}' execution_count=18}\n``` {.python .cell-code}\nprint(f\"Number of chains: {len(x.chains)}\")\nfor chain in x.chains:\n    print(chain)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNumber of chains: 2\n[Tensor(-9), Tensor(-1), Tensor(1), Tensor(2)]\n[Tensor(-9), Tensor(-1), Tensor(1), Tensor(2)]\n```\n:::\n:::\n\n\nLooks reasonable so far.  We have 2 identical paths, each with 4 derivatives (one for each edge in the path) as expected.\n\nlet's multiply the derivatives together along each path and add the total for each path together and see if we get the right answer.  \n\nAccording my calculations (and [Wolfram Alpha](https://www.wolframalpha.com/)) the derivative of $L$ wrt $x$ is:\n$$\\frac{\\partial L}{\\partial x} = 2m (c + mx - y)$$\nPlugging the values for our tensors in, we get\n$$2\\times2 (4 + (2\\times3) - 1) = 36$$\n\n::: {#84272c6e .cell vscode='{\"languageId\":\"python\"}' execution_count=19}\n``` {.python .cell-code}\ntotal_derivative = Tensor(0)\nfor chain in x.chains:\n    chain_total = Tensor(1)\n    for step in chain:\n        chain_total = _mul(chain_total, step)\n    total_derivative = _add(total_derivative, chain_total)\n\ntotal_derivative\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nTensor(36)\n```\n:::\n:::\n\n\nThe correct answer! It looks like our algorithm works.  All that remains is to put all the peices together.\n\n## Putting it all together\n\nWhen dreaming up the algorithm, we kept a record of the nodes, edges and paths which made plotting and debugging easier.  Now that we know that it works, we can remove these and simplify things a bit.\n\n::: {#7080ff4b .cell vscode='{\"languageId\":\"python\"}' execution_count=20}\n``` {.python .cell-code}\ndef backward(root_node: Tensor) -> None:\n    stack = [(root_node, [])]\n\n    while stack:\n        node, current_derivative = stack.pop()\n\n        # if we have reached a parameter (it has no arguments\n        # because it wasn't created by an operation) then\n        # record the path taken to get here\n        if not node.args:\n            if not hasattr(node, \"chain\"):\n                node.chain = []\n            node.chain.append(current_derivative)\n            continue\n\n        for arg, op in zip(node.args, node.local_derivatives):\n            stack.append((arg, current_derivative + [op]))\n```\n:::\n\n\nThere is also no need (for now) to store the derivatives and calculate them separately.  Instead, we can avoid a bunch of repeated calculations by multiplying the derivatives as we go.\n\n::: {#d502f69d .cell vscode='{\"languageId\":\"python\"}' execution_count=21}\n``` {.python .cell-code}\ndef backward(root_node: Tensor) -> None:\n    stack = [(root_node, Tensor(1))]\n\n    while stack:\n        node, current_derivative = stack.pop()\n\n        # if we have reached a parameter (it has no arguments\n        # because it wasn't created by an operation) then add the\n        # derivative\n        if not node.args:\n            if node.derivative is None:\n                node.derivative = current_derivative\n            else:\n                node.derivative = _add(node.derivative, current_derivative)\n            continue\n\n        for arg, derivative in zip(node.args, node.local_derivatives):\n            stack.append((arg, _mul(current_derivative, derivative)))\n```\n:::\n\n\nlet's make sure we didn't break anything\n\n::: {#91a022c8 .cell vscode='{\"languageId\":\"python\"}' execution_count=22}\n``` {.python .cell-code}\ny = Tensor(1)\nm = Tensor(2)\nx = Tensor(3)\nc = Tensor(4)\n\nleft = _sub(y, _add(_mul(m, x), c))\nright = _sub(y, _add(_mul(m, x), c))\n\nL = _mul(left, right)\nbackward(L)\n\nprint(f\"{x.derivative = }\\n\")\ntest(got=x.derivative.value, want=36)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nx.derivative = Tensor(36)\n\n✅ - Want: 36, Got: 36\n```\n:::\n:::\n\n\nlet's put this algorithm into our Tensor object\n\n::: {#44e8e9b3 .cell vscode='{\"languageId\":\"python\"}' execution_count=23}\n``` {.python .cell-code}\nclass Tensor:\n    \"\"\"\n    A float that can be differentiated\n    \"\"\"\n\n    args: tuple[Tensor] = ()\n    local_derivatives: tuple[Tensor] = ()\n    # The derivative (once we've calculated it).  This is None if the derivative\n    # has not been computed yet\n    derivative: Tensor | None = None\n\n    def __init__(self, value: float):\n        self.value = value\n\n    def __repr__(self) -> str:\n        return f\"Tensor({self.value.__repr__()})\"\n\n    def backward(self):\n        if self.args is None or self.local_derivatives is None:\n            raise ValueError(\n                \"Cannot differentiate a Tensor that is not a function of other Tensors\"\n            )\n\n        stack = [(self, Tensor(1))]\n\n        while stack:\n            node, current_derivative = stack.pop()\n\n            # if we have reached a parameter (it has no arguments\n            # because it wasn't created by an operation) then add the\n            # derivative\n            if not node.args:\n                if not hasattr(node, \"derivative\") or node.derivative is None:\n                    node.derivative = Tensor(0)\n                node.derivative = _add(node.derivative, current_derivative)\n                continue\n\n            for arg, derivative in zip(node.args, node.local_derivatives):\n                new_derivative = _mul(current_derivative, derivative)\n                stack.append((arg, new_derivative))\n```\n:::\n\n\nlet's try it out\n\n::: {#9c170eff .cell vscode='{\"languageId\":\"python\"}' execution_count=24}\n``` {.python .cell-code}\ny = Tensor(1)\nm = Tensor(2)\nx = Tensor(3)\nc = Tensor(4)\n\nleft = _sub(y, _add(_mul(m, x), c))\nright = _sub(y, _add(_mul(m, x), c))\n\nL = _mul(left, right)\nL.backward()\n\ntest(x.derivative, Tensor(36))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n❌ - Want: Tensor(36), Got: Tensor(36)\n```\n:::\n:::\n\n\nHuh?\n\nBy default, if you compare two objects in python with `==`, python will check whether the object on the left has the same reference as the object as the one on the right.  Because `Tensor(36)` is a different object (that just happens to have the same value) to `x.derivative`, `x.derivative == Tensor(36)` returns `False`.\n\nIt makes a lot more sense to compare two tensors based upon their `.value`.  To achieve this, we can add the `__eq__` special method to `Tensor` which will change the behaviour of the `==` operator for `Tensor` objects\n\n::: {#c08de1b8 .cell vscode='{\"languageId\":\"python\"}' execution_count=25}\n``` {.python .cell-code}\ndef __eq__(self, other) -> bool:\n    \"\"\"\n    Tells python to compare .value when applying the `==`\n    operation to two tensors instead of comparing references\n    \"\"\"\n    if not isinstance(other, \"Tensor\"):\n        raise TypeError(f\"Cannot compare a Tensor with a {type(other)}\")\n\n    return self.value == other.value\n```\n:::\n\n\nSimilarly, if we try to use `+`, `-` or `*` on our tensors, we'll get an error.  We can tell python how to do these operations on our tensors by defining the following special functions:\n\n - `__add__` let's us use `+`\n - `__sub__` let's us use `-`\n - `__mul__` let's us use `*`\n\n::: {#bb20e066 .cell vscode='{\"languageId\":\"python\"}' execution_count=26}\n``` {.python .cell-code}\ndef __add__(self, other) -> Tensor:\n    if not isinstance(other, \"Tensor\"):\n        raise TypeError(f\"Cannot add a Tensor to a {type(other)}\")\n\n    return _add(self, other)\n\n\ndef __sub__(self, other) -> Tensor:\n    if not isinstance(other, \"Tensor\"):\n        raise TypeError(f\"Cannot subtract a Tensor from a {type(other)}\")\n\n    return _sub(self, other)\n\n\ndef __mul__(self, other) -> Tensor:\n    if not isinstance(other, \"Tensor\"):\n        raise TypeError(f\"Cannot multiply a Tensor with a {type(other)}\")\n    return _mul(self, other)\n```\n:::\n\n\nFinally, we can add the `__iadd__`, `__isub__` and `__imul__` methods to allow us to use `+=`, `-=` and `*=`.\n\n::: {#c9ef2f92 .cell vscode='{\"languageId\":\"python\"}' execution_count=27}\n``` {.python .cell-code}\ndef __iadd__(self, other) -> Tensor:\n    self = self.__add__(self, other)\n    return self\n\n\ndef __isub__(self, other) -> Tensor:\n    self = self.__sub__(self, other)\n    return self\n\n\ndef __imul__(self, other) -> Tensor:\n    self = self.__mul__(self, other)\n    return self\n```\n:::\n\n\nWhile we're here, let's clean up our backward function a bit by replacing the ugly `_add` and `_mul` operations with `+` and `*`.\n\n::: {#589811ca .cell vscode='{\"languageId\":\"python\"}' execution_count=28}\n``` {.python .cell-code}\ndef backward(self):\n    if self.args is None or self.local_derivatives is None:\n        raise ValueError(\n            \"Cannot differentiate a Tensor that is not a function of other Tensors\"\n        )\n\n    stack = [(self, Tensor(1))]\n\n    while stack:\n        node, current_derivative = stack.pop()\n\n        # if we have reached a parameter (it has no arguments\n        # because it wasn't created by an operation) then add the\n        # derivative\n        if not node.args:\n            if node.derivative is None:\n                node.derivative += current_derivative\n            else:\n                node.derivative += current_derivative\n            continue\n\n        for arg, derivative in zip(node.args, node.local_derivatives):\n            stack.append((arg, current_derivative * derivative))\n```\n:::\n\n\nPutting all of these improvements together, we get a final `Tensor` object as follows:\n\n::: {#af268030 .cell vscode='{\"languageId\":\"python\"}' execution_count=29}\n``` {.python .cell-code}\nclass Tensor:\n    \"\"\"\n    A float that can be differentiated\n    \"\"\"\n\n    args: tuple[Tensor] = ()\n    local_derivatives: tuple[Tensor] = ()\n    # The derivative (once we've calculated it).  This is None if the derivative\n    # has not been computed yet\n    derivative: Tensor | None = None\n\n    def __init__(self, value: float):\n        self.value = value\n\n    def __repr__(self) -> str:\n        return f\"Tensor({self.value.__repr__()})\"\n\n    def __eq__(self, other) -> bool:\n        if not isinstance(other, Tensor):\n            raise TypeError(f\"Cannot compare a Tensor with a {type(other)}\")\n        return self.value == other.value\n\n    def __add__(self, other) -> Tensor:\n        if not isinstance(other, Tensor):\n            raise TypeError(f\"Cannot add a Tensor to a {type(other)}\")\n        return _add(self, other)\n\n    def __sub__(self, other) -> Tensor:\n        if not isinstance(other, Tensor):\n            raise TypeError(f\"Cannot subtract a Tensor from a {type(other)}\")\n        return _sub(self, other)\n\n    def __mul__(self, other) -> Tensor:\n        if not isinstance(other, Tensor):\n            raise TypeError(f\"Cannot multiply a Tensor with a {type(other)}\")\n        return _mul(self, other)\n\n    def __iadd__(self, other) -> Tensor:\n        return self.__add__(other)\n\n    def __isub__(self, other) -> Tensor:\n        return self.__sub__(other)\n\n    def __imul__(self, other) -> Tensor:\n        return self.__mul__(other)\n\n    def __repr__(self) -> str:\n        return f\"Tensor({self.value})\"\n\n    def backward(self):\n        if self.args is None or self.local_derivatives is None:\n            raise ValueError(\n                \"Cannot differentiate a Tensor that is not a function of other Tensors\"\n            )\n\n        stack = [(self, Tensor(1))]\n\n        while stack:\n            node, current_derivative = stack.pop()\n\n            # if we have reached a parameter (it has no arguments\n            # because it wasn't created by an operation) then add the\n            # current_derivative to derivative\n            if not node.args:\n                if node.derivative is None:\n                    node.derivative = current_derivative\n                else:\n                    node.derivative += current_derivative\n                continue\n\n            for arg, derivative in zip(node.args, node.local_derivatives):\n                stack.append((arg, current_derivative * derivative))\n```\n:::\n\n\nlet's take it for a spin.  We'll try calculating $L$ again\n\n::: {#32255d46 .cell vscode='{\"languageId\":\"python\"}' execution_count=30}\n``` {.python .cell-code}\ny = Tensor(1)\nm = Tensor(2)\nx = Tensor(3)\nc = Tensor(4)\n\ndiff = y - ((m * x) + c)\nL = diff * diff\nL.backward()\n\ntest(got=x.derivative, want=Tensor(36))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ - Want: Tensor(36), Got: Tensor(36)\n```\n:::\n:::\n\n\nMuch easier!\n\nTo really see what this baby can do, I asked a language model for the most complicated expression it could think of and it gave me this:\n\n$$f(x) = (2x^3 + 4x^2 - 5x) \\times (3x^2 - 2x + 7) - (6x^4 + 2x^3 - 8x^2) + (5x^2 - 3x)$$\nAccording to [Wolfram Alpha](https://www.wolframalpha.com/), the derivative of this expression is:\n$$\\frac{d f(x)}{dx} = -38 + 102 x - 33 x^2 + 8 x^3 + 30 x^4$$\n\nIf we plug 2 into this equation, the answer is apparently 578 (again, thanks to [Wolfram Alpha](https://www.wolframalpha.com/)).\n\nlet's try it with our algorithm\n\n::: {#b8626e5c .cell vscode='{\"languageId\":\"python\"}' execution_count=31}\n``` {.python .cell-code}\nx = Tensor(2)\n\ny = (\n    (Tensor(2) * x * x * x + Tensor(4) * x * x - Tensor(5) * x)\n    * (Tensor(3) * x * x - Tensor(2) * x + Tensor(7))\n    - (Tensor(6) * x * x * x * x + Tensor(2) * x * x * x - Tensor(8) * x * x)\n    + (Tensor(5) * x * x - Tensor(3) * x)\n)\n\ny.backward()\n\ntest(got=x.derivative, want=Tensor(578))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n✅ - Want: Tensor(578), Got: Tensor(578)\n```\n:::\n:::\n\n\nOnce again, we got the right answer!\n\n# Conclusion\nFrom nothing, we have now written an algorithm that will let us differentiate any mathematical expression (provided it only involves addition, subtraction and multiplication).  We did this by converting our expression into a graph and reimagining partial derivatives as operations on the edges of that graph.  Then we found that could apply Breadth First Search to combine all the derivatives together to get a final answer.\n\nDifferentiating scalars is (I hope you agree) interesting, but it isn't exactly GPT-4.  That said, with a few small modifications to our algorithm, we can extend our algorithm to handle multi-dimensional tensors like matrices and vectors.  Once you can do that, you can build up to the backpropagation and, eventually, to a fully functional language model.\n\nNext time, we'll extend our algorithm to vectors and matrices and build up from their to a working neural network.  If you want to peak ahead, you can check out the repo for [Tricycle](https://github.com/bclarkson-code/Tricycle) which is the name for the deep learning framework we're building.\n\n",
    "supporting": [
      "blog_post_1_files"
    ],
    "filters": [],
    "includes": {}
  }
}